from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import re
from datetime import datetime
import csv
import io
from database import (
	add_expense as db_add_expense,
	get_user_stats,
	get_month_stats,
	delete_last_expense,
	get_all_expenses,
	set_monthly_budget,
	get_budget_info
)
from utils import parse_expense, format_stats, create_expense_chart

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
CATEGORIES = {
	"üçî": "–ï–¥–∞",
	"üöó": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
	"üè†": "–ñ–∏–ª—å–µ",
	"üíä": "–ó–¥–æ—Ä–æ–≤—å–µ",
	"üéÆ": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
	"üõí": "–ü–æ–∫—É–ø–∫–∏",
	"üìö": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
	"üí∞": "–î—Ä—É–≥–æ–µ"
}


async def start (update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
	user = update.effective_user
	welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.

üìù –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>100 –∫–æ—Ñ–µ</code> –∏–ª–∏ <code>100 üçî –±—É—Ä–≥–µ—Ä</code>

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π
/month - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
/category - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
/budget - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç
/check_budget - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±—é–¥–∂–µ—Ç
/delete - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV

–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ä–∞—Å—Ö–æ–¥.
    """
	await update.message.reply_text (welcome_text, parse_mode = 'HTML')


async def help_command (update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
	help_text = """
üìö <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞</b>

<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>
‚Ä¢ <code>100 –æ–±–µ–¥</code> - –¥–æ–±–∞–≤–∏—Ç 100‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–î—Ä—É–≥–æ–µ"
‚Ä¢ <code>250 üçî –±—É—Ä–≥–µ—Ä</code> - –¥–æ–±–∞–≤–∏—Ç 250‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ï–¥–∞"
‚Ä¢ <code>1500 üöó</code> - –¥–æ–±–∞–≤–∏—Ç 1500‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>
üçî - –ï–¥–∞
üöó - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
üè† - –ñ–∏–ª—å–µ
üíä - –ó–¥–æ—Ä–æ–≤—å–µ
üéÆ - –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
üõí - –ü–æ–∫—É–ø–∫–∏
üìö - –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
üí∞ - –î—Ä—É–≥–æ–µ

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π
/month - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
/category - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
/budget <code>—Å—É–º–º–∞</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç
/check_budget - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
/delete - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
/export - –°–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ CSV

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>50 –∫–æ—Ñ–µ</code>
‚Ä¢ <code>2000 üè† –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞</code>
‚Ä¢ <code>300 üçî –¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã</code>
‚Ä¢ <code>/budget 50000</code>
    """
	await update.message.reply_text (help_text, parse_mode = 'HTML')


async def add_expense (update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞"""
	user_id = update.effective_user.id
	text = update.message.text
	
	# –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
	expense_data = parse_expense (text)
	
	if not expense_data:
		await update.message.reply_text (
			"‚ùå –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
			"<code>100 –æ–±–µ–¥</code> –∏–ª–∏ <code>100 üçî –±—É—Ä–≥–µ—Ä</code>",
			parse_mode = 'HTML'
		)
		return
	
	# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
	expense_id = db_add_expense (
		user_id = user_id,
		amount = expense_data ['amount'],
		category = expense_data ['category'],
		description = expense_data ['description']
	)
	
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞
	budget_info = get_budget_info (user_id)
	budget_warning = ""
	
	if budget_info:
		remaining = budget_info ['remaining']
		percentage = budget_info ['percentage']
		
		if remaining < 0:
			budget_warning = f"\n\n‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –±—é–¥–∂–µ—Ç –Ω–∞ {abs (remaining):.0f}‚ÇΩ!</b>"
		elif percentage > 80:
			budget_warning = f"\n\n‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {percentage:.0f}% –º–µ—Å—è—á–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞"
	
	response_text = (
		f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {expense_data ['amount']}‚ÇΩ\n"
		f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense_data ['category']}\n"
		f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense_data ['description'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
		f"{budget_warning}"
	)
	
	await update.message.reply_text (response_text, parse_mode = 'HTML')


async def show_stats (update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 30 –¥–Ω–µ–π"""
	user_id = update.effective_user.id
	stats = get_user_stats (user_id, days = 30)
	
	if stats ['total'] == 0:
		await update.message.reply_text ("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
		return
	
	stats_text = format_stats (stats)
	await update.message.reply_text (stats_text, parse_mode = 'HTML')


async def show_month_stats (update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
	user_id = update.effective_user.id
	stats = get_month_stats (user_id)
	
	if stats ['total'] == 0:
		await update.message.reply_text (f"üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {stats ['month']}")
		return
	
	text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats ['month']}</b>

üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {stats ['total']:.0f}‚ÇΩ
üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç: {stats ['count']}
üìÖ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –≤ –¥–µ–Ω—å: {stats ['total'] / len (stats ['daily_expenses']):.0f}‚ÇΩ

<b>–ü–æ –¥–Ω—è–º:</b>
"""
	
	for date_str, amount in stats ['daily_expenses'] [-10:]:
		date_obj = datetime.strptime (date_str, '%Y-%m-%d')
		text += f"‚Ä¢ {date_obj.strftime ('%d.%m')}: {amount:.0f}‚ÇΩ\n"
	
	if len (stats ['daily_expenses']) > 10:
		text += f"\n<i>...–∏ –µ—â—ë {len (stats ['daily_expenses']) - 10} –¥–Ω–µ–π</i>"
	
	await update.message.reply_text (text, parse_mode = 'HTML')


async def show_category_stats (update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
	user_id = update.effective_user.id
	
	# –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
	if update.callback_query:
		await update.callback_query.answer ()
		category = update.callback_query.data.replace ("category_", "")
		# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		await update.callback_query.message.reply_text (
			f"–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
		)
		return
	
	stats = get_user_stats (user_id, days = 30)
	
	if not stats ['by_category']:
		await update.message.reply_text ("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤")
		return
	
	# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
	keyboard = []
	for category, total, count in stats ['by_category']:
		button_text = f"{category}: {total:.0f}‚ÇΩ ({count})"
		keyboard.append ([InlineKeyboardButton (button_text, callback_data = f"category_{category}")])
	
	reply_markup = InlineKeyboardMarkup (keyboard)
	
	text = "üìä <b>–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ 30 –¥–Ω–µ–π:</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"
	
	await update.message.reply_text (text, reply_markup = reply_markup, parse_mode = 'HTML')


async def delete_last (update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥"""
	user_id = update.effective_user.id
	
	if delete_last_expense (user_id):
		await update.message.reply_text ("‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω")
	else:
		await update.message.reply_text ("‚ùå –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")


async def export_data (update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
	user_id = update.effective_user.id
	expenses = get_all_expenses (user_id)
	
	if not expenses:
		await update.message.reply_text ("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
		return
	
	# –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
	output = io.StringIO ()
	writer = csv.writer (output)
	writer.writerow (['–î–∞—Ç–∞', '–°—É–º–º–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–û–ø–∏—Å–∞–Ω–∏–µ'])
	
	for expense in expenses:
		date = datetime.strptime (expense [0], '%Y-%m-%d %H:%M:%S')
		writer.writerow ([
			date.strftime ('%d.%m.%Y %H:%M'),
			expense [1],
			expense [2],
			expense [3] or ''
		])
	
	# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
	output.seek (0)
	await update.message.reply_document (
		document = io.BytesIO (output.getvalue ().encode ('utf-8')),
		filename = f'expenses_{datetime.now ().strftime ("%Y%m%d")}.csv',
		caption = "üìä –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
	)


async def set_budget (update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞"""
	user_id = update.effective_user.id
	
	if not context.args:
		await update.message.reply_text (
			"‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞\n"
			"–ü—Ä–∏–º–µ—Ä: <code>/budget 50000</code>",
			parse_mode = 'HTML'
		)
		return
	
	try:
		budget = float (context.args [0])
		if budget <= 0:
			raise ValueError ()
		
		set_monthly_budget (user_id, budget)
		
		await update.message.reply_text (
			f"‚úÖ –ú–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {budget:.0f}‚ÇΩ\n"
			f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_budget –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
		)
	except ValueError:
		await update.message.reply_text ("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")


async def check_budget (update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞"""
	user_id = update.effective_user.id
	budget_info = get_budget_info (user_id)
	
	if not budget_info:
		await update.message.reply_text (
			"‚ùå –ë—é–¥–∂–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /budget –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
		)
		return
	
	emoji = "‚úÖ" if budget_info ['remaining'] >= 0 else "‚ùå"
	
	text = f"""
üí∞ <b>–ë—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü: {budget_info ['budget']:.0f}‚ÇΩ</b>

üìä –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {budget_info ['spent']:.0f}‚ÇΩ ({budget_info ['percentage']:.0f}%)
{emoji} –û—Å—Ç–∞–ª–æ—Å—å: {budget_info ['remaining']:.0f}‚ÇΩ

{"‚ö†Ô∏è <b>–ë—é–¥–∂–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω!</b>" if budget_info ['remaining'] < 0 else ""}
    """
	
	await update.message.reply_text (text, parse_mode = 'HTML')
