# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

import re
from typing import Dict, Optional

# –ú–∞–ø–ø–∏–Ω–≥ —ç–º–æ–¥–∑–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
EMOJI_TO_CATEGORY = {
	"üçî": "–ï–¥–∞",
	"üçï": "–ï–¥–∞",
	"üçú": "–ï–¥–∞",
	"‚òï": "–ï–¥–∞",
	"üöó": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
	"üöï": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
	"üöá": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
	"üè†": "–ñ–∏–ª—å–µ",
	"üè°": "–ñ–∏–ª—å–µ",
	"üíä": "–ó–¥–æ—Ä–æ–≤—å–µ",
	"üíâ": "–ó–¥–æ—Ä–æ–≤—å–µ",
	"üéÆ": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
	"üé¨": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
	"üé≠": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
	"üõí": "–ü–æ–∫—É–ø–∫–∏",
	"üëï": "–ü–æ–∫—É–ø–∫–∏",
	"üëü": "–ü–æ–∫—É–ø–∫–∏",
	"üìö": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
	"üìñ": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
	"üí∞": "–î—Ä—É–≥–æ–µ"
}


def parse_expense (text: str) -> Optional [Dict]:
	"""
	–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞
	–ü—Ä–∏–º–µ—Ä—ã:
	- "100 –æ–±–µ–¥" -> {amount: 100, category: "–î—Ä—É–≥–æ–µ", description: "–æ–±–µ–¥"}
	- "250 üçî –±—É—Ä–≥–µ—Ä" -> {amount: 250, category: "–ï–¥–∞", description: "–±—É—Ä–≥–µ—Ä"}
	"""
	# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
	pattern = r'^(\d+(?:\.\d+)?)\s*([^\s]*?)\s*(.*)$'
	match = re.match (pattern, text.strip ())
	
	if not match:
		return None
	
	amount = float (match.group (1))
	emoji_or_desc = match.group (2)
	rest = match.group (3)
	
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
	category = "–î—Ä—É–≥–æ–µ"
	description = ""
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–º–æ–¥–∑–∏
	if emoji_or_desc in EMOJI_TO_CATEGORY:
		category = EMOJI_TO_CATEGORY [emoji_or_desc]
		description = rest.strip () if rest else category.lower ()
	else:
		# –ï—Å–ª–∏ –Ω–µ—Ç —ç–º–æ–¥–∑–∏, –≤—Å–µ –ø–æ—Å–ª–µ —Å—É–º–º—ã - –æ–ø–∏—Å–∞–Ω–∏–µ
		description = f"{emoji_or_desc} {rest}".strip ()
		if not description:
			description = "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
	
	return {
		'amount': amount,
		'category': category,
		'description': description
	}


def format_stats (stats: Dict) -> str:
	"""–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
	text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats ['days']} –¥–Ω–µ–π</b>

üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {stats ['total']:.0f}‚ÇΩ
üìÖ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –≤ –¥–µ–Ω—å: {stats ['avg_daily']:.0f}‚ÇΩ

<b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>
"""
	
	if stats ['by_category']:
		for category, total, count in stats ['by_category']:
			percentage = (total / stats ['total'] * 100) if stats ['total'] > 0 else 0
			text += f"‚Ä¢ {category}: {total:.0f}‚ÇΩ ({percentage:.0f}%, {count} —à—Ç.)\n"
	
	return text


def create_expense_chart (expenses: list) -> bytes:
	"""
	–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
	–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å matplotlib
	"""
	# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
	pass